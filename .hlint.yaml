# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules
- ignore: {name: Avoid lambda}
- ignore: {name: Eta reduce}
- ignore: {name: Evaluate, within: Foundation.IO.File}
- ignore: {name: Move brackets to avoid $}
- ignore: {name: Reduce duplication, within: Foundation.Collection.Zippable}
- ignore: {name: Redundant bracket}
- ignore: {name: Redundant do}
- ignore: {name: Reduce duplication}
- ignore: {name: Redundant lambda}
- ignore: {name: Unused LANGUAGE pragma, within: Foundation.Internal.CallStack}
- ignore: {name: Unused LANGUAGE pragma, within: Foundation.Primitive.Error}
- ignore: {name: Unused LANGUAGE pragma, within: Foundation.Monad}
- ignore: {name: Use break}
- ignore: {name: Use camelCase}
- ignore: {name: Use fewer imports, within: Foundation.Internal.ByteSwap}
- ignore: {name: Use fmap, within: Foundation.Conduit.Internal}
- ignore: {name: Use fmap, within: Foundation.Monad.State}
- ignore: {name: Use fromMaybe, within: Foundation.Partial}
- ignore: {name: Use if}
- ignore: {name: Use infix}
- ignore: {name: Use module export list}
- ignore: {name: Use newtype instead of data}
- ignore: {name: Use notElem, within: Foundation.Collection.Collection}
- ignore: {name: Use print}
- ignore: {name: Use section}
- ignore: {name: Use span, within: Foundation.Collection.Sequential}
- ignore: {name: Use String}
- ignore: {name: Use traverse, within: Foundation.Collection.Mappable}
- ignore: {name: Use void, within: Foundation.Monad.Exception}
- ignore: {name: Use when}


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~




# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
